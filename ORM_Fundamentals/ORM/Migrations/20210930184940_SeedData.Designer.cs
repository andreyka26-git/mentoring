// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ORM.Domain;

namespace ORM.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210930184940_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ORM.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Citations")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Citations = 10,
                            Content = "Content1",
                            CreatedDateTime = new DateTime(2021, 9, 30, 21, 49, 40, 307, DateTimeKind.Local).AddTicks(1660)
                        },
                        new
                        {
                            Id = 2,
                            Citations = 10,
                            Content = "Content2",
                            CreatedDateTime = new DateTime(2021, 9, 30, 21, 49, 40, 307, DateTimeKind.Local).AddTicks(1918)
                        });
                });

            modelBuilder.Entity("ORM.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(2021, 9, 30, 21, 49, 40, 303, DateTimeKind.Local).AddTicks(4055),
                            Name = "Book1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(2021, 9, 30, 21, 49, 40, 306, DateTimeKind.Local).AddTicks(8870),
                            Name = "Book1"
                        });
                });

            modelBuilder.Entity("ORM.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Mark = 4,
                            ReviewDateTime = new DateTime(2021, 9, 30, 21, 49, 40, 307, DateTimeKind.Local).AddTicks(468),
                            ReviewerName = "Name1"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            Mark = 2,
                            ReviewDateTime = new DateTime(2021, 9, 30, 21, 49, 40, 307, DateTimeKind.Local).AddTicks(1016),
                            ReviewerName = "Name2"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            Mark = 5,
                            ReviewDateTime = new DateTime(2021, 9, 30, 21, 49, 40, 307, DateTimeKind.Local).AddTicks(1028),
                            ReviewerName = "Name3"
                        });
                });

            modelBuilder.Entity("ORM.Models.Review", b =>
                {
                    b.HasOne("ORM.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ORM.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
